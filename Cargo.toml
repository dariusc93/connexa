[package]
name = "connexa"
version = "0.2.1"
edition = "2024"
license = "Apache-2.0 OR MIT"
authors = ["Darius Clark"]
exclude = [".gitignore"]
description = "High level abtraction of rust-libp2p"
readme = "README.md"
repository = "https://github.com/dariusc93/connexa"

[features]
default = ["full"]

full = ["stream", "floodsub", "identify", "dcutr", "gossipsub", "autonat", "relay", "kad", "ping", "request-response", "request-response-misc", "rendezvous", "upnp", "mdns", "rsa", "dns", "ed25519", "secp256k1", "ecdsa", "tls", "noise", "tcp", "quic", "pnet", "websocket", "yamux"]

rsa = ["libp2p/rsa"]
ed25519 = ["libp2p/ed25519"]
secp256k1 = ["libp2p/secp256k1"]
ecdsa = ["libp2p/ecdsa"]

identify = ["libp2p/identify"]
gossipsub = ["libp2p/gossipsub"]
floodsub = ["libp2p/floodsub"]
autonat = ["libp2p/autonat"]
relay = ["libp2p/relay"]
dcutr = ["libp2p/dcutr"]
kad = ["libp2p/kad"]
ping = ["libp2p/ping"]
request-response = ["libp2p/request-response"]
request-response-misc = ["libp2p/json", "libp2p/cbor"]
rendezvous = ["libp2p/rendezvous"]
upnp = ["libp2p/upnp"]
stream = ["dep:libp2p-stream"]
mdns = ["libp2p/mdns"]

dns = ["libp2p/dns"]
tls = ["libp2p/tls"]
noise = ["libp2p/noise"]
tcp = ["libp2p/tcp"]
quic = ["libp2p/quic"]
pnet = ["libp2p/pnet"]

yamux = ["libp2p/yamux"]


webrtc = ["dep:libp2p-webrtc", "dep:libp2p-webrtc-websys"]
websocket = ["libp2p/websocket", "rcgen", "libp2p/websocket-websys"]
webtransport = ["libp2p/webtransport-websys"]

[workspace]
members = ["examples/custom-behaviour-and-context", "examples/custom-transport", "examples/distributed-key-value-store", "examples/file-sharing", "examples/gossipsub", "examples/relay", "examples/rendezvous", "examples/stream"]

[workspace.dependencies]
async-rt = "0.1.8"
async-trait = { version = "0.1.88" }
bytes = "1.10.1"
cid = "0.11.1"
either = "1.15.0"
futures = { version = "0.3.31" }
futures-timer = "3.0.0"
getrandom = { version = "0.2.15" }
getrandom_03 = { version = "0.3.3", package = "getrandom" }
hickory-resolver = "0.25.0-alpha.5"
indexmap = "2.9.0"
libp2p = { version = "0.56.0" }
libp2p-allow-block-list = "0.6.0"
libp2p-connection-limits = "0.6.0"
libp2p-stream = { version = "0.4.0-alpha" }
libp2p-webrtc = { version = "=0.9.0-alpha.1", features = ["pem"] }
libp2p-webrtc-websys = "0.4.0"
pollable-map = "0.1.7"
pem = { version = "3.0.5" }
rand = "0.8.5"
rand_09 = { version = "0.9.1", package = "rand" }
rcgen = { version = "0.13.2", features = ["pem", "x509-parser"] }
rlimit = "0.10.2"
send_wrapper = "0.6.0"
serde = { version = "1.0.219" }
serde-wasm-bindgen = "0.6.5"
tracing = { version = "0.1.41" }

tokio = { default-features = false, version = "1.45.1" }
wasm-bindgen-futures = { version = "0.4.50" }


[dependencies]
async-rt.workspace = true
async-trait.workspace = true
bytes = { workspace = true }
cid = { workspace = true, optional = true }
either.workspace = true
futures.workspace = true
indexmap.workspace = true
libp2p-allow-block-list.workspace = true
libp2p-connection-limits.workspace = true
libp2p-stream = { workspace = true, optional = true }
pem.workspace = true
pollable-map.workspace = true
rand.workspace = true
serde = { features = ["derive"], workspace = true }
tracing = { workspace = true }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
futures-timer.workspace = true
libp2p = { features = ["macros", "tokio", "serde"], workspace = true }
libp2p-webrtc = { workspace = true, features = ["tokio"], optional = true }
hickory-resolver.workspace = true
rcgen = { workspace = true, optional = true }
rlimit.workspace = true
tokio = { features = ["full"], workspace = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
futures-timer = { workspace = true, features = ["wasm-bindgen"] }
getrandom = { workspace = true, features = ["js"] }
getrandom_03 = { workspace = true, features = ["wasm_js"] }
libp2p = { features = ["macros", "serde", "wasm-bindgen"], workspace = true }
libp2p-webrtc-websys = { workspace = true, optional = true }
send_wrapper.workspace = true
serde-wasm-bindgen.workspace = true
tokio = { default-features = false, features = ["sync", "macros"], workspace = true }
wasm-bindgen-futures.workspace = true
